(require '[clojure.tools.trace :refer [trace-vars]])
(trace-vars heapsort heapify down)
(heapsort (shuffle (range 10)))
(heapsort/heapsort [3 4 6 2 7 5 0 9 1 8])
| (heapsort/heapify [3 4 6 2 7 5 0 9 1 8] max-heap)
| | (heapsort/down 5 9 [3 4 6 2 7 5 0 9 1 8] max-heap)
| | => [3 4 6 2 7 5 0 9 1 8]
| | (heapsort/down 4 9 [3 4 6 2 7 5 0 9 1 8] max-heap)
| | => [3 4 6 2 8 5 0 9 1 7]
| | (heapsort/down 3 9 [3 4 6 2 8 5 0 9 1 7] max-heap)
| | => [3 4 6 9 8 5 0 2 1 7]
| | (heapsort/down 2 9 [3 4 6 9 8 5 0 2 1 7] max-heap)
| | => [3 4 8 9 7 5 0 2 1 6]
| | (heapsort/down 1 9 [3 4 8 9 7 5 0 2 1 6] max-heap)
| | => [3 9 8 4 7 5 0 2 1 6]
| | (heapsort/down 0 9 [3 9 8 4 7 5 0 2 1 6] max-heap)
| | => [9 8 7 4 6 5 0 2 1 3]
| => [9 8 7 4 6 5 0 2 1 3]
| (heapsort/down 0 8 [3 8 7 4 6 5 0 2 1 9] max-heap)
| => [8 7 6 4 3 5 0 2 1 9]
| (heapsort/down 0 7 [1 7 6 4 3 5 0 2 8 9] max-heap)
| => [7 6 5 4 3 1 0 2 8 9]
| (heapsort/down 0 6 [2 6 5 4 3 1 0 7 8 9] max-heap)
| => [6 5 3 4 2 1 0 7 8 9]
| (heapsort/down 0 5 [0 5 3 4 2 1 6 7 8 9] max-heap)
| => [5 4 3 0 2 1 6 7 8 9]
| (heapsort/down 0 4 [1 4 3 0 2 5 6 7 8 9] max-heap)
| => [4 3 2 0 1 5 6 7 8 9]
| (heapsort/down 0 3 [1 3 2 0 4 5 6 7 8 9] max-heap)
| => [3 2 1 0 4 5 6 7 8 9]
| (heapsort/down 0 2 [0 2 1 3 4 5 6 7 8 9] max-heap)
| => [2 1 0 3 4 5 6 7 8 9]
| (heapsort/down 0 1 [0 1 2 3 4 5 6 7 8 9] max-heap)
| => [1 0 2 3 4 5 6 7 8 9]
| (heapsort/down 0 0 [0 1 2 3 4 5 6 7 8 9] max-heap)
| => [0 1 2 3 4 5 6 7 8 9]
=> [0 1 2 3 4 5 6 7 8 9]
[0 1 2 3 4 5 6 7 8 9]
